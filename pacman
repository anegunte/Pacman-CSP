class PacmanCSP:
    def __init__(self, grid_size, obstacles, food_locations):
        self.grid_size = grid_size
        self.obstacles = obstacles
        self.food_locations = food_locations
        self.variables = ['Pacman', 'Ghost1', 'Ghost2']
        self.domains = {
            'Pacman': [(x, y) for x in range(grid_size[0]) for y in range(grid_size[1])],
            'Ghost1': [(x, y) for x in range(grid_size[0]) for y in range(grid_size[1])],
            'Ghost2': [(x, y) for x in range(grid_size[0]) for y in range(grid_size[1])]
        }

    def constraints_satisfied(self, assignment):
        pacman_position = assignment.get('Pacman')
        ghost1_position = assignment.get('Ghost1')
        ghost2_position = assignment.get('Ghost2')

        # Check if all variables are assigned
        if None in (pacman_position, ghost1_position, ghost2_position):
            return True

        # Collision avoidance: Pacman cannot occupy the same position as any ghost
        if pacman_position == ghost1_position or pacman_position == ghost2_position:
            return False

        # Check if Pacman's path is obstacle-free
        for food_location in self.food_locations:
            if not self.is_path_obstacle_free(pacman_position, food_location):
                return False

        # Additional constraints can be added here based on the specific rules of the game

        return True

    def is_path_obstacle_free(self, start, end):
        x1, y1 = start
        x2, y2 = end

        dx = abs(x2 - x1)
        dy = abs(y2 - y1)
        sx = 1 if x1 < x2 else -1
        sy = 1 if y1 < y2 else -1

        err = dx - dy

        while x1 != x2 or y1 != y2:
            if (x1, y1) in self.obstacles:
                return False
            e2 = 2 * err
            if e2 > -dy:
                err -= dy
                x1 += sx
            if e2 < dx:
                err += dx
                y1 += sy

        return True

    def backtrack(self, assignment):
        if len(assignment) == len(self.variables):
            return assignment  # Solution found

        unassigned_variable = None
        for variable in self.variables:
            if variable not in assignment:
                unassigned_variable = variable
                break

        for value in self.domains[unassigned_variable]:
            assignment[unassigned_variable] = value
            if self.constraints_satisfied(assignment):
                result = self.backtrack(assignment)
                if result is not None:
                    return result
            del assignment[unassigned_variable]  # Remove the value if it doesn't lead to a solution

        return None  # No solution found

    def solve(self):
        assignment = {}
        result = self.backtrack(assignment)
        if result is not None:
            print("Solution found:")
            print(result)
            self.display_path(result)
        else:
            print("No solution found.")

    def display_path(self, assignment):
        pacman_path = [assignment['Pacman']]
        for food_location in self.food_locations:
            pacman_path.append(food_location)
        print("Pacman's path:")
        for i, position in enumerate(pacman_path):
            print(f"Step {i+1}: {position}")

# Define the grid size, obstacles, and food locations
grid_size = (5, 5)
obstacles = [(4, 2), (1, 3)]
food_locations = [(4, 4), (3, 2), (0, 3)]

# Create an instance of PacmanCSP
pacman_csp = PacmanCSP(grid_size, obstacles, food_locations)

# Solve the Pacman CSP and display the path
pacman_csp.solve()
